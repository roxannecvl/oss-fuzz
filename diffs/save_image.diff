diff --git a/infra/helper.py b/infra/helper.py
index 1d03de9e8..853c91ef0 100755
--- a/infra/helper.py
+++ b/infra/helper.py
@@ -1442,6 +1442,8 @@ def run_fuzzer(args):
       '%s:/out' % args.project.out,
       '-t',
       BASE_RUNNER_IMAGE,
+      'timeout',
+      '4h',
       'run_fuzzer',
       args.fuzzer_name,
   ] + args.fuzzer_args)
diff --git a/projects/libjpeg-turbo/CMakeLists.txt b/projects/libjpeg-turbo/CMakeLists.txt
new file mode 100644
index 000000000..537dfa51d
--- /dev/null
+++ b/projects/libjpeg-turbo/CMakeLists.txt
@@ -0,0 +1,66 @@
+if(NOT ENABLE_STATIC)
+  message(FATAL_ERROR "Fuzz targets require static libraries.")
+endif()
+if(NOT WITH_TURBOJPEG)
+  message(FATAL_ERROR "Fuzz targets require the TurboJPEG API library.")
+endif()
+
+set(FUZZ_BINDIR "" CACHE PATH
+  "Directory into which fuzz targets should be installed")
+if(NOT FUZZ_BINDIR)
+  message(FATAL_ERROR "FUZZ_BINDIR must be specified.")
+endif()
+message(STATUS "FUZZ_BINDIR = ${FUZZ_BINDIR}")
+
+set(FUZZ_LIBRARY "" CACHE STRING
+  "Path to fuzzer library or flags necessary to link with it")
+if(NOT FUZZ_LIBRARY)
+  message(FATAL_ERROR "FUZZ_LIBRARY must be specified.")
+endif()
+message(STATUS "FUZZ_LIBRARY = ${FUZZ_LIBRARY}")
+
+enable_language(CXX)
+
+set(EFFECTIVE_CXX_FLAGS
+  "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UC}}")
+message(STATUS "C++ Compiler flags = ${EFFECTIVE_CXX_FLAGS}")
+
+add_executable(cjpeg_fuzzer${FUZZER_SUFFIX} cjpeg.cc ../src/cdjpeg.c
+  ../src/rdbmp.c ../src/rdgif.c ../src/rdppm.c ../src/rdswitch.c
+  ../src/rdtarga.c)
+set_property(TARGET cjpeg_fuzzer${FUZZER_SUFFIX} PROPERTY COMPILE_FLAGS
+  ${COMPILE_FLAGS})
+target_link_libraries(cjpeg_fuzzer${FUZZER_SUFFIX} ${FUZZ_LIBRARY} jpeg-static)
+install(TARGETS cjpeg_fuzzer${FUZZER_SUFFIX}
+  RUNTIME DESTINATION ${FUZZ_BINDIR} COMPONENT bin)
+
+macro(add_fuzz_target target source_file)
+  add_executable(${target}_fuzzer${FUZZER_SUFFIX} ${source_file})
+  target_link_libraries(${target}_fuzzer${FUZZER_SUFFIX} ${FUZZ_LIBRARY}
+    turbojpeg-static)
+  install(TARGETS ${target}_fuzzer${FUZZER_SUFFIX}
+    RUNTIME DESTINATION ${FUZZ_BINDIR} COMPONENT bin)
+endmacro()
+
+add_fuzz_target(compress compress.cc)
+
+add_fuzz_target(compress_yuv compress_yuv.cc)
+
+add_fuzz_target(compress_lossless compress_lossless.cc)
+
+add_fuzz_target(compress12 compress12.cc)
+
+add_fuzz_target(compress12_lossless compress12.cc)
+
+add_fuzz_target(compress16_lossless compress16_lossless.cc)
+
+# NOTE: This target is named libjpeg_turbo_fuzzer instead of decompress_fuzzer
+# in order to preserve the corpora from Google's OSS-Fuzz target for
+# libjpeg-turbo, which this target replaces.
+add_fuzz_target(libjpeg_turbo decompress.cc)
+
+add_fuzz_target(decompress_yuv decompress_yuv.cc)
+
+add_fuzz_target(transform transform.cc)
+
+add_fuzz_target(save_image save_image.cc)
\ No newline at end of file
diff --git a/projects/libjpeg-turbo/Dockerfile b/projects/libjpeg-turbo/Dockerfile
index 7ddd36554..82fe2d3b8 100644
--- a/projects/libjpeg-turbo/Dockerfile
+++ b/projects/libjpeg-turbo/Dockerfile
@@ -19,18 +19,23 @@ FROM gcr.io/oss-fuzz-base/base-builder
 RUN apt-get update && apt-get install -y make yasm cmake
 RUN git clone --depth 1 https://github.com/libjpeg-turbo/fuzz && \
     cat fuzz/branches.txt | while read branch; do \
-      git clone --depth 1 https://github.com/libjpeg-turbo/libjpeg-turbo -b $branch libjpeg-turbo.$branch; \
+    git clone --depth 1 https://github.com/libjpeg-turbo/libjpeg-turbo -b $branch libjpeg-turbo.$branch; \
     done
 
 RUN git clone --depth 1 https://github.com/libjpeg-turbo/seed-corpora
 RUN cd seed-corpora && zip -r ../decompress_fuzzer_seed_corpus.zip afl-testcases/jpeg* bugs/decompress*
 RUN cat fuzz/branches.txt | while read branch; do \
-      zip -r decompress_fuzzer_seed_corpus.zip libjpeg-turbo.$branch/testimages/*.jpg; \
+    zip -r decompress_fuzzer_seed_corpus.zip libjpeg-turbo.$branch/testimages/*.jpg; \
     done
 RUN cd seed-corpora && zip -r ../compress_fuzzer_seed_corpus.zip afl-testcases/bmp afl-testcases/gif* afl-testcases/targa bugs/compress*
 RUN cat fuzz/branches.txt | while read branch; do \
-      zip -r compress_fuzzer_seed_corpus.zip libjpeg-turbo.$branch/testimages/*.bmp libjpeg-turbo.$branch/testimages/*.ppm; \
+    zip -r compress_fuzzer_seed_corpus.zip libjpeg-turbo.$branch/testimages/*.bmp libjpeg-turbo.$branch/testimages/*.ppm; \
     done
 RUN rm -rf seed-corpora
 
 COPY build.sh $SRC/
+COPY build_local.sh $SRC/libjpeg-turbo.main/fuzz/build.sh
+COPY CMakeLists.txt $SRC/libjpeg-turbo.main/fuzz/CMakeLists.txt
+COPY save_image.cc  $SRC/libjpeg-turbo.main/fuzz/save_image.cc
+
+COPY seed_generation/save_image_corpus.zip $SRC/save_image_corpus.zip
diff --git a/projects/libjpeg-turbo/build_local.sh b/projects/libjpeg-turbo/build_local.sh
new file mode 100644
index 000000000..db4c94c34
--- /dev/null
+++ b/projects/libjpeg-turbo/build_local.sh
@@ -0,0 +1,36 @@
+#!/bin/bash
+
+set -u
+set -e
+
+FUZZER_SUFFIX=
+if [ $# -ge 1 ]; then
+	FUZZER_SUFFIX="$1"
+	FUZZER_SUFFIX="`echo $1 | sed 's/\./_/g'`"
+fi
+
+if [ "$SANITIZER" = "memory" ]; then
+	export CFLAGS="$CFLAGS -DZERO_BUFFERS=1"
+fi
+
+cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_STATIC=1 -DENABLE_SHARED=0 \
+	-DCMAKE_C_FLAGS_RELWITHDEBINFO="-g -DNDEBUG" \
+	-DCMAKE_CXX_FLAGS_RELWITHDEBINFO="-g -DNDEBUG" -DCMAKE_INSTALL_PREFIX=$WORK \
+	-DWITH_FUZZ=1 -DFUZZ_BINDIR=$OUT -DFUZZ_LIBRARY=$LIB_FUZZING_ENGINE \
+	-DFUZZER_SUFFIX="$FUZZER_SUFFIX"
+make "-j$(nproc)" "--load-average=$(nproc)"
+make install
+
+cp $SRC/compress_fuzzer_seed_corpus.zip $OUT/cjpeg_fuzzer${FUZZER_SUFFIX}_seed_corpus.zip
+cp $SRC/compress_fuzzer_seed_corpus.zip $OUT/compress_fuzzer${FUZZER_SUFFIX}_seed_corpus.zip
+cp $SRC/compress_fuzzer_seed_corpus.zip $OUT/compress_yuv_fuzzer${FUZZER_SUFFIX}_seed_corpus.zip
+cp $SRC/compress_fuzzer_seed_corpus.zip $OUT/compress_lossless_fuzzer${FUZZER_SUFFIX}_seed_corpus.zip
+cp $SRC/compress_fuzzer_seed_corpus.zip $OUT/compress12_fuzzer${FUZZER_SUFFIX}_seed_corpus.zip
+cp $SRC/compress_fuzzer_seed_corpus.zip $OUT/compress12_lossless_fuzzer${FUZZER_SUFFIX}_seed_corpus.zip
+cp $SRC/compress_fuzzer_seed_corpus.zip $OUT/compress16_lossless_fuzzer${FUZZER_SUFFIX}_seed_corpus.zip
+
+cp $SRC/decompress_fuzzer_seed_corpus.zip $OUT/libjpeg_turbo_fuzzer${FUZZER_SUFFIX}_seed_corpus.zip
+cp $SRC/decompress_fuzzer_seed_corpus.zip $OUT/decompress_yuv_fuzzer${FUZZER_SUFFIX}_seed_corpus.zip
+cp $SRC/decompress_fuzzer_seed_corpus.zip $OUT/transform_fuzzer${FUZZER_SUFFIX}_seed_corpus.zip
+
+cp $SRC/save_image_corpus.zip $OUT/save_image_fuzzer${FUZZER_SUFFIX}_seed_corpus.zip
diff --git a/projects/libjpeg-turbo/save_image.cc b/projects/libjpeg-turbo/save_image.cc
new file mode 100644
index 000000000..c8324c414
--- /dev/null
+++ b/projects/libjpeg-turbo/save_image.cc
@@ -0,0 +1,130 @@
+/*
+ * Fuzzer harness for tj3SaveImage8/12/16 functions in libjpeg-turbo
+ */
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <turbojpeg.h>
+#include <unistd.h>
+// Constants to limit input sizes
+#define MAX_WIDTH 1920
+#define MAX_HEIGHT 1080
+#define MIN_DIM 1
+// Supported pixel formats to test
+#define NUMPF 3
+static const enum TJPF pixelFormats[NUMPF] = {
+    TJPF_RGB,  // Most common format
+    TJPF_GRAY, // Grayscale
+    TJPF_CMYK  // CMYK format
+};
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+  // Need at least 12 bytes for 3 int32 values (width, height, pixelFormat)
+  if (size < 12)
+    return 0;
+  tjhandle handle = NULL;
+  unsigned char *imgBuf8 = NULL;
+  short *imgBuf12 = NULL;
+  unsigned short *imgBuf16 = NULL;
+  char filename8[] = "/tmp/fuzz_output8_XXXXXX";
+  char filename12[] = "/tmp/fuzz_output12_XXXXXX";
+  char filename16[] = "/tmp/fuzz_output16_XXXXXX";
+  int fd = -1;
+  int retval = 0;
+  int width, height, pitch;
+  int pf;
+  size_t copySize;
+  // Reading width and height from data
+  memcpy(&width, data, sizeof(int));
+  memcpy(&height, data + sizeof(int), sizeof(int));
+  width = (int)(((uint32_t)width) % (MAX_WIDTH - MIN_DIM + 1)) + MIN_DIM;
+  height = (int)(((uint32_t)height) % (MAX_HEIGHT - MIN_DIM + 1)) + MIN_DIM;
+  // Pixel format selection based on next byte
+  pf = pixelFormats[data[2 * sizeof(int)] % NUMPF];
+  // Allocate image buffers
+  pitch = width * tjPixelSize[pf];
+  size_t imgSize = pitch * height;
+
+  // Allocate 8-bit buffer
+  imgBuf8 = (unsigned char *)malloc(imgSize);
+  if (!imgBuf8) goto bailout;
+
+  // Allocate 12-bit buffer
+  imgBuf12 = (short *)malloc(imgSize * sizeof(short) / sizeof(unsigned char));
+  if (!imgBuf12) goto bailout;
+
+  // Allocate 16-bit buffer
+  imgBuf16 = (unsigned short *)malloc(imgSize * sizeof(unsigned short) / sizeof(unsigned char));
+  if (!imgBuf16) goto bailout;
+
+  // Fill 8-bit buffer with fuzz data or zeros if not enough data
+  copySize = size - 2 * sizeof(int) - 1;
+  if (copySize > imgSize)
+    copySize = imgSize;
+  if (copySize > 0) {
+    memcpy(imgBuf8, data + 2 * sizeof(int) + 1, copySize);
+  }
+  if (copySize < imgSize) {
+    memset(imgBuf8 + copySize, 0, imgSize - copySize);
+  }
+
+  // Convert 8-bit data to 12-bit (scale up values)
+  for (size_t i = 0; i < imgSize; i++) {
+    imgBuf12[i] = (short)(imgBuf8[i] << 4); // Scale from 8-bit to 12-bit
+  }
+
+  // Convert 8-bit data to 16-bit (scale up values)
+  for (size_t i = 0; i < imgSize; i++) {
+    imgBuf16[i] = (unsigned short)(imgBuf8[i] << 8); // Scale from 8-bit to 16-bit
+  }
+
+  for (int i = 0; i < 3; i++) {
+    // Making filename unique
+    if (i == 0) {
+      if ((fd = mkstemp(filename8)) < 0)
+        goto bailout;
+    } else if (i == 1) {
+      if ((fd = mkstemp(filename12)) < 0)
+        goto bailout;
+    } else {
+      if ((fd = mkstemp(filename16)) < 0)
+        goto bailout;
+    }
+    close(fd); // Closing the file descriptor
+
+    // Create a TurboJPEG decompression instance
+    if ((handle = tj3Init(TJINIT_DECOMPRESS)) == NULL)
+      goto bailout;
+
+    // Call the appropriate save function with the proper buffer
+    if (i == 0) {
+      retval = tj3SaveImage8(handle, filename8, imgBuf8, width, pitch, height, pf);
+    } else if (i == 1) {
+      retval = tj3SaveImage12(handle, filename12, imgBuf12, width, pitch, height, pf);
+    } else {
+      retval = tj3SaveImage16(handle, filename16, imgBuf16, width, pitch, height, pf);
+    }
+
+    // Cleanup handle for this iteration
+    if (handle) {
+      tj3Destroy(handle);
+      handle = NULL;
+    }
+  }
+
+bailout:
+  // Clean up resources
+  if (imgBuf8)
+    free(imgBuf8);
+  if (imgBuf12)
+    free(imgBuf12);
+  if (imgBuf16)
+    free(imgBuf16);
+  if (handle)
+    tj3Destroy(handle);
+  // Remove the output files to avoid filling up the disk
+  unlink(filename8);
+  unlink(filename12);
+  unlink(filename16);
+  return 0;
+}
